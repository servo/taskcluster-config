#!/usr/bin/env python3

import os
import shutil
import subprocess
import sys

os.environ.setdefault("TASKCLUSTER_ROOT_URL", "https://community-tc.services.mozilla.com/")

here = os.path.dirname(__file__)
venv = os.path.join(here, ".venv")
commands = os.path.join(here, "commands")

if len(sys.argv) > 1:
    command = sys.argv[1]
else:
    command = "help"

command_file = os.path.join(commands, command + ".py")
if not os.path.isfile(command_file):
    print("Usage: %s <command> [args]" % sys.argv[0])
    print()
    print("Commands:")
    for command in os.listdir(commands):
        if command.endswith(".py"):
            print("  " + command[:-len(".py")])
    sys.exit(1)

# Create a virtualenv if it doesnâ€™t exist
if not os.path.isdir(venv):
    exit_code = subprocess.call(["virtualenv", "-p", sys.executable, venv])
    if exit_code:
        sys.exit(exit_code)

# Install requirements with pip, unless we already have
requirements_file = os.path.join(here, "requirements.txt")
requirements = open(requirements_file).read()

installed_file = os.path.join(venv, "installed-requirements")
try:
    installed = open(installed_file).read()
except OSError:
    installed = ""

if installed != requirements:
    pip = os.path.join(venv, "bin", "pip")
    exit_code = subprocess.call([pip, "install", "-r", requirements_file])
    if exit_code:
        sys.exit(exit_code)
    shutil.copyfile(requirements_file, installed_file)


py = os.path.join(venv, "bin", "python")
sys.exit(subprocess.call([py, command_file] + sys.argv[2:], cwd=here))
